:PROPERTIES:
:header-args: :mkdirp yes
:END:

* A literate org configuration
This file contains the configuration for my system
** Output function
This function is called in the flake to build the system
#+begin_src nix :tangle "build-fun.nix"
  { self, nixpkgs, home-manager, emacs-overlay, ... }@attrs: {
    nixosConfigurations.cheeky-monkey = nixpkgs.lib.nixosSystem {
      system = "x86_64-linux";
      specialArgs = attrs;
      modules = [
        (./configuration.nix)
        home-manager.nixosModules.home-manager
        {
          home-manager.useGlobalPkgs = true;
          home-manager.useUserPackages = true;
          home-manager.users.max = import ./home-manager.nix;
        }
      ];
    };
  }
#+end_src

** Hardware configuration

#+begin_src nix :tangle "hardware-configuration.nix"
  # Do not modify this file!  It was generated by ‘nixos-generate-config’
  # and may be overwritten by future invocations.  Please make changes
  # to /etc/nixos/configuration.nix instead.
  { config, lib, pkgs, modulesPath, ... }:

  {
    imports =
      [ (modulesPath + "/installer/scan/not-detected.nix")
      ];

    boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "sd_mod" "sdhci_pci" ];
    boot.initrd.kernelModules = [ "dm-snapshot" ];
    boot.kernelModules = [ "kvm-amd" ];
    boot.extraModulePackages = [ ];

    fileSystems."/" =
      { device = "/dev/disk/by-uuid/4913b9d4-05bf-41e9-8c9e-276e87e42892";
        fsType = "ext4";
      };

    fileSystems."/boot" =
      { device = "/dev/disk/by-uuid/82F9-11A3";
        fsType = "vfat";
      };

    swapDevices =
      [ { device = "/dev/disk/by-uuid/89c4f470-6ec7-4536-a318-d83a2def4f8b"; }
      ];

    hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  }
#+end_src

** System Configuration

#+begin_src nix :tangle "configuration.nix"
  { config, pkgs, home-manager, emacs-overlay, ... }:

  {
    imports = [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      ./modules
    ];

    nix = {
      package = pkgs.nixUnstable;
      extraOptions = ''
        experimental-features = nix-command flakes
        keep-outputs = true
        keep-derivations = true
      '';
    };

    nixpkgs = {
      overlays = [ emacs-overlay.overlay ];
      config.allowUnfree = true;
    };

    # Use the systemd-boot EFI boot loader.
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;
    boot.kernelPackages = pkgs.linuxPackages_latest;

    boot.initrd.luks.devices = {
      crypted = {
        device = "/dev/disk/by-partuuid/7820a35d-c583-4656-a716-968f83ea55b0";
        allowDiscards = true;
        preLVM = true;
      };
    };

    networking.hostName = "cheeky-monkey"; # Define your hostname.
    networking.networkmanager.enable = true;
    # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

    # Set your time zone.
    time.timeZone = "Europe/London";

    # The global useDHCP flag is deprecated, therefore explicitly set to false here.
    # Per-interface useDHCP will be mandatory in the future, so this generated config
    # replicates the default behaviour.
    networking.useDHCP = false;
    networking.interfaces.enp2s0f0.useDHCP = true;
    networking.interfaces.enp5s0.useDHCP = true;

    # Configure network proxy if necessary
    # networking.proxy.default = "http://user:password@proxy:port/";
    # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

    # Select internationalisation properties.
    i18n.defaultLocale = "en_GB.UTF-8";
    console = {
      font = "Lat2-Terminus16";
      keyMap = "uk";
    };

    # Enable the X11 windowing system.
    # services.xserver.enable = true;

    # Configure keymap in X11
    services.xserver.layout = "gb";

    # Enable CUPS to print documents.
    # services.printing.enable = true;

    # Enable sound.
    sound.enable = true;
    hardware.pulseaudio.enable = true;
    hardware.bluetooth.enable = true;

    # Enable touchpad support (enabled default in most desktopManager).
    services.xserver.libinput.enable = true;

    # Define a user account. Don't forget to set a password with ‘passwd’.
    users.users.max = {
      isNormalUser = true;
      extraGroups =
        [ "wheel" "sudo" "networkmanager" "video" ];
    };

    # List packages installed in system profile. To search, run:
    # $ nix search wget
    environment.systemPackages = import ./system-packages.nix { inherit pkgs; };

    programs.steam.enable = true;

    # Enable the OpenSSH daemon.
    services.openssh.enable = true;

    programs.sway-complete.enable = true;

    services.blueman.enable = true;

    # This value determines the NixOS release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. It‘s perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # Before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    system.stateVersion = "21.11"; # Did you read the comment?

  }


#+end_src

** Home Configuration
#+begin_src nix :tangle "home-manager.nix"
  {...}: {}
#+end_src
