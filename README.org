:PROPERTIES:
:header-args: :mkdirp yes
:END:

* A literate NixOS configuration
This file documents my NixOS configuration. To use, all you need to do is enable flakes and run
: sudo nixos-rebuild switch --flake "github:maxastyler/literate-nixos?dir=install-flake"

This command uses emacs to tangle the code in this file into a system configuration, and then installs it.

I use org babel's interpolation throughout this config. Whenever you see code like:
: <<some-name>>
The code block with =#+name: some-name= is interpolated into that position.

** Flake function
This function is called in [[./install-flake/flake.nix][the installation flake]] to generate the config.
#+begin_src nix :tangle "build-fun.nix"
  { self, nixpkgs, home-manager, emacs-overlay, ... }@attrs: {
    nixosConfigurations.cheeky-monkey = nixpkgs.lib.nixosSystem {
      system = "x86_64-linux";
      specialArgs = attrs;
      modules = [
        (./configuration.nix)
        home-manager.nixosModules.home-manager
        {
          home-manager.useGlobalPkgs = true;
          home-manager.useUserPackages = true;
          home-manager.users.max = import ./home-manager.nix;
        }
      ];
    };
  }
#+end_src

** Hardware configuration
The hardware configuration for my laptop - autogenerated by nix, so I don't want to touch it 😊
#+begin_src nix :tangle "hardware-configuration.nix"
  # Do not modify this file!  It was generated by ‘nixos-generate-config’
  # and may be overwritten by future invocations.  Please make changes
  # to /etc/nixos/configuration.nix instead.
  { config, lib, pkgs, modulesPath, ... }:

  {
    imports =
      [ (modulesPath + "/installer/scan/not-detected.nix")
      ];

    boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "sd_mod" "sdhci_pci" ];
    boot.initrd.kernelModules = [ "dm-snapshot" ];
    boot.kernelModules = [ "kvm-amd" ];
    boot.extraModulePackages = [ ];

    fileSystems."/" =
      { device = "/dev/disk/by-uuid/4913b9d4-05bf-41e9-8c9e-276e87e42892";
        fsType = "ext4";
      };

    fileSystems."/boot" =
      { device = "/dev/disk/by-uuid/82F9-11A3";
        fsType = "vfat";
      };

    swapDevices =
      [ { device = "/dev/disk/by-uuid/89c4f470-6ec7-4536-a318-d83a2def4f8b"; }
      ];

    hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  }
#+end_src

** System Configuration
The main configuration for the root system. It's a function which takes in an attribute set and returns another attribute set with settings defined.
#+begin_src nix :tangle "configuration.nix" :noweb yes 
  { config, pkgs, home-manager, emacs-overlay, ... }:

  {
    imports = [
      ./hardware-configuration.nix
      ./modules
    ];

    <<main-configuration-inner>>

    # Use the systemd-boot EFI boot loader.
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;
    boot.kernelPackages = pkgs.linuxPackages_latest;

    boot.initrd.luks.devices = {
      crypted = {
        device = "/dev/disk/by-partuuid/7820a35d-c583-4656-a716-968f83ea55b0";
        allowDiscards = true;
        preLVM = true;
      };
    };

    networking.hostName = "cheeky-monkey"; # Define your hostname.
    networking.networkmanager.enable = true;
    # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

    # Set your time zone.
    time.timeZone = "Europe/London";

    # The global useDHCP flag is deprecated, therefore explicitly set to false here.
    # Per-interface useDHCP will be mandatory in the future, so this generated config
    # replicates the default behaviour.
    networking.useDHCP = false;
    networking.interfaces.enp2s0f0.useDHCP = true;
    networking.interfaces.enp5s0.useDHCP = true;

    # Configure network proxy if necessary
    # networking.proxy.default = "http://user:password@proxy:port/";
    # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

    # Select internationalisation properties.
    i18n.defaultLocale = "en_GB.UTF-8";
    console = {
      font = "Lat2-Terminus16";
      keyMap = "uk";
    };

    # Enable the X11 windowing system.
    # services.xserver.enable = true;

    # Configure keymap in X11
    services.xserver.layout = "gb";

    # Enable CUPS to print documents.
    # services.printing.enable = true;

    # Enable sound.
    sound.enable = true;
    hardware.pulseaudio.enable = true;
    hardware.bluetooth.enable = true;

    # Enable touchpad support (enabled default in most desktopManager).
    services.xserver.libinput.enable = true;

    # Define a user account. Don't forget to set a password with ‘passwd’.
    users.users.max = {
      isNormalUser = true;
      extraGroups =
        [ "wheel" "sudo" "networkmanager" "video" ];
    };

    # List packages installed in system profile. To search, run:
    # $ nix search wget
    environment.systemPackages = import ./system-packages.nix { inherit pkgs; };

    programs.steam.enable = true;

    # Enable the OpenSSH daemon.
    services.openssh.enable = true;

    programs.sway-complete.enable = true;

    services.blueman.enable = true;

    # This value determines the NixOS release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. It‘s perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # Before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    system.stateVersion = "21.11"; # Did you read the comment?

  }


#+end_src
*** Main Configuration Settings
:PROPERTIES:
:header-args: :noweb-ref main-configuration-inner
:END:
**** Language settings
I want to use unstable nix packages (cutting edge please!) and enable flakes.
#+begin_src nix 
  nix = {
    package = pkgs.nixUnstable;
    extraOptions = ''
          experimental-features = nix-command flakes
          keep-outputs = true
          keep-derivations = true
        '';
  };
#+end_src
**** Nixpkgs settings
I'll add in the emacs overlay and allow unfree software.
#+begin_src nix
  nixpkgs = {
    overlays = [ emacs-overlay.overlay ];
    config.allowUnfree = true;
  };
#+end_src

*** Packages
#+begin_src nix :tangle "system-packages.nix"
  { pkgs }:
  with pkgs; [
    (firefox.override { extraNativeMessagingHosts = [ passff-host ]; })
    (python310.withPackages (ps: with ps; [ numpy scipy matplotlib pyrsistent ]))
    black
    cmake
    gcc
    git
    gnome3.gnome-tweaks
    gnumake
    libtool
    libvterm
    mpv
    nixfmt
    pyright
    pass
    ripgrep
    fd
    rnix-lsp
    texlive.combined.scheme-full
    tmux
    vim
    wget
  ]
  
#+end_src

*** System Modules
#+begin_src nix :tangle "modules/default.nix"
  { ... }: { imports = [ ./sway-complete.nix ]; }
#+end_src

**** Sway system configuration
#+begin_src nix :tangle "modules/sway-complete.nix"
  { config, lib, pkgs, ... }:
  with lib;
  let cfg = config.programs.sway-complete;
  in {
    options.programs.sway-complete = {
      enable = mkEnableOption "Complete Installation of Sway";
    };
    config = mkIf cfg.enable {
      programs.sway = {
        enable = true;
        wrapperFeatures.gtk = true;
      };

      environment.loginShellInit = ''
        if [ -z $DISPLAY ] && [ "$(tty)" = "/dev/tty1" ]; then
          exec sway
        fi
      '';

      systemd.user.services.swayidle = {
        description = "Idle Manager for Wayland";
        documentation = [ "man:swayidle(1)" ];
        wantedBy = [ "sway-session.target" ];
        partOf = [ "graphical-session.target" ];
        path = [ pkgs.bash ];
        serviceConfig = {
          ExecStart = ''
            ${pkgs.swayidle}/bin/swayidle -w -d \
                   timeout 300 '${pkgs.sway}/bin/swaymsg "output * dpms off"' \
                   resume '${pkgs.sway}/bin/swaymsg "output * dpms on"'
                 '';
        };
      };

      environment.systemPackages = with pkgs; [
        grim
        slurp
        pavucontrol
        swaylock
        swayidle
        wl-clipboard
        mako
        wofi
        gtk-engine-murrine
        gtk_engines
        gsettings-desktop-schemas
        lxappearance
        brightnessctl
        font-awesome
        networkmanagerapplet
      ];
    };
  }
  
#+end_src


** Home Configuration
#+begin_src nix :tangle "home-manager.nix"
  { pkgs, lib, ... }: {
    imports = [ ./home-manager-modules ];
    home.username = "max";
    home.homeDirectory = "/home/max";
    home.packages = with pkgs; [ htop ];
    home.stateVersion = "22.05";
    programs.home-manager.enable = true;
    programs.emacs = {
      enable = true;
      package = pkgs.emacsGcc;
      extraPackages = epkgs: [ epkgs.nix-mode epkgs.magit epkgs.vterm ];
    };

    programs.git = {
      enable = true;
      userName = "Max Tyler";
      userEmail = "maxastyler@gmail.com";
      extraConfig = { init.defaultBranch = "master"; };
    };

    programs.alacritty = { enable = true; };

    programs.feh.enable = true;

    programs.bash = {
      enable = true;
      bashrcExtra = ''
        vterm_printf(){
            if [ -n "$TMUX" ] && ([ "''${TERM%%-*}" = "tmux" ] || [ "''${TERM%%-*}" = "screen" ] ); then
                # Tell tmux to pass the escape sequences through
                printf "\ePtmux;\e\e]%s\007\e\\" "$1"
            elif [ "''${TERM%%-*}" = "screen" ]; then
                # GNU screen (screen, screen-256color, screen-256color-bce)
                printf "\eP\e]%s\007\e\\" "$1"
            else
                printf "\e]%s\e\\" "$1"
            fi
        }
        vterm_prompt_end(){
            vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
        }
        PS1=$PS1'\[$(vterm_prompt_end)\]'
      '';
    };
    programs.direnv.enable = true;
    programs.direnv.nix-direnv.enable = true;

    services.gpg-agent = {
      enable = true;
      defaultCacheTtl = 7200;
      enableSshSupport = true;
    };

    services.emacs = {
      enable = true;
      client.enable = true;
      socketActivation.enable = true;
    };

    wayland.windowManager.sway = {
      enable = true;
      wrapperFeatures.gtk = true;
      config = {
        bars = [ ];
        modifier = "Mod4";
        input = {
          "*" = {
            xkb_layout = "gb";
            xkb_options = "ctrl:nocaps";
          };
          "2131:256:Topre_Corporation_HHKB_Professional" = { xkb_layout = "us"; };
        };
      };
    };

  }

#+end_src

*** Home Modules
#+begin_src nix :tangle "home-manager-modules/default.nix"
  { ... }: { imports = [ ./sway-configuration.nix ]; }

#+end_src

**** Sway home configuration
#+begin_src nix :tangle "home-manager-modules/sway-configuration.nix"
  { config, lib, pkgs, ... }@attrs:
  let modifier = config.wayland.windowManager.sway.config.modifier;
  in {
    programs.waybar = {
      enable = true;
      systemd.enable = true;
      settings = import ./waybar-config.nix attrs;
    };

    wayland.windowManager.sway.config.keybindings = lib.mkOptionDefault {

      # open terminal
      "${modifier}+Return" = "exec ${pkgs.alacritty}/bin/alacritty";
      # open emacs
      "${modifier}+Shift+Return" = "exec 'emacsclient -c'";
      # Brightness
      "XF86MonBrightnessDown" =
        "exec '${pkgs.brightnessctl}/bin/brightnessctl set 2%-'";
      "XF86MonBrightnessUp" =
        "exec '${pkgs.brightnessctl}/bin/brightnessctl set +2%'";

      # lock the screen
      "${modifier}+End" = "exec '${pkgs.swaylock}/bin/swaylock --ring-color black --line-color 000000 --inside-color 000000 --line-color 000000 --ring-color 000000 --key-hl-color ffffff'";
      # Volume
      "XF86AudioRaiseVolume" = "exec 'pactl set-sink-volume @DEFAULT_SINK@ +1%'";
      "XF86AudioLowerVolume" = "exec 'pactl set-sink-volume @DEFAULT_SINK@ -1%'";
      "XF86AudioMute" = "exec 'pactl set-sink-mute @DEFAULT_SINK@ toggle'";
      "XF86AudioMicMute" = "exec 'pactl set-source-mute @DEFAULT_SOURCE@ toggle'";

      # screenshots
      "Print" = "exec ${pkgs.grim}/bin/grim";
      "XF86SelectiveScreenshot" = "exec '${pkgs.grim}/bin/grim -g \"$(${pkgs.slurp}/bin/slurp)\"'";
    };
  }
#+end_src

**** Waybar configuration
#+begin_src nix :tangle "home-manager-modules/waybar-config.nix"
  { config, ... }: {
    mainBar = {
      modules-left = [ "idle_inhibitor" "sway/window" ];
      modules-center = [ "sway/workspaces" "sway/mode" ];
      modules-right = [ "pulseaudio" "network" "battery" "clock" "tray" ];
      "sway/workspaces" = {
        disable-scroll = true;
        all-outputs = true;
      };
      "network" = {
        "format" = "{ifname}";
        "format-wifi" = "{essid} ({signalStrength}%) ";
        "format-ethernet" = "{ipaddr}/{cidr} ";
        "format-disconnected" = "";
        "tooltip-format" = "{ifname} via {gwaddr} ";
        "tooltip-format-wifi" = "{essid} ({signalStrength}%) ";
        "tooltip-format-ethernet" = "{ifname} ";
        "tooltip-format-disconnected" = "Disconnected";
        "max-length" = 50;
      };
      "sway/window" = { "max-length" = 50; };
      "battery" = {
        "format" = "{capacity}% {icon}";
        "format-icons" = [ "" "" "" "" "" ];
      };
      "clock" = { "format-alt" = "{:%a, %d. %b  %H:%M}"; };
      "pulseaudio" = {
        "format" = "{volume}% {icon}";
        "format-bluetooth" = "{volume}% {icon}";
        "format-muted" = "";
        "format-icons" = {
          "headphone" = "";
          "hands-free" = "";
          "headset" = "";
          "phone" = "";
          "portable" = "";
          "car" = "";
          "default" = [ "" "" ];
        };
        "scroll-step" = 1;
        "on-click" = "pavucontrol";
      };
      "idle_inhibitor" = {
        "format" = "{icon}";
        "format-icons" = {
          "activated" = "";
          "deactivated" = "";
        };
      };
    };
  }
  
#+end_src

